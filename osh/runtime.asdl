-- Data types for evaluating an AST (or LST at the moment.)

module runtime
{
  -- The spids array is parallel to strs, the argv values.  Note that each
  -- entry in argv came from a single word, but a word can produce multiple
  -- argv entries.
  arg_vector = (string* strs, int* spids)

  -- A static word_part from osh.asdl is evaluated to a dynamic part_value.
  part_value = 
    -- Substitutions and unquoted literals get split/elided/globbed.
    -- TODO: invert and rename to 'quoted', because quoted means escaping
    -- in other contexts!
    String(string s, bool do_split_glob)
    -- "$@" or "${a[@]}" -- never split or globbed since double quoted.
  | Array(string* strs)

  -- A static word from osh.asdl is evaluted to a dynamic value.  value
  -- instances are stored in state.Mem().
  value =
    -- Undef isn't visible at the language level.  We model it as a value
    -- rather than an error code because it's manipulated with ${a:-default}
    -- and such.
    Undef
  | Str(string s)
  | StrArray(string* strs)
  | AssocArray(dict d)

  -- For Oil?
  -- | ArrayInt(int* array_int)
  -- | ArrayBool(bool* a)

  -- For storing a variable.
  -- TODO:
  -- * add spid for last-assigned location
  -- * use a bitfield for flags.
  cell = (value val, bool exported, bool readonly, bool is_assoc_array)

  -- An undefined variable can become an indexed array with s[x]=1.  But if we
  -- 'declare -A' it, it will be undefined and waiting to turn into an
  -- associative array.
  var_flags = Exported | ReadOnly | AssocArray | Global
  scope = LocalOnly | GlobalOnly | Dynamic

  -- For assignment, evaluated to osh_ast.lhs_expr
  lvalue = 
    LhsName(string name)
  | LhsIndexedName(string name, int index)

  -- evaluated version of syntax.redir
  redirect = 
    PathRedirect(id op_id, int fd, string filename, int op_spid)
  | DescRedirect(id op_id, int fd, int target_fd, int op_spid)
    -- here doc or here word
  | HereRedirect(int fd, string body, int op_spid)

  -- NOTE: not used right now, isinstance() check works fine
  job_status =
    ProcessStatus(int status)
  | PipelineStatus(int* statuses)

  -- For word splitting in legacy.py
  span = Black | Delim | Backslash
  emit = Part | Delim | Empty | Escape | Nothing
  state = Invalid | Start | DE_White1 | DE_Gray | DE_White2 | Black | Backslash

  -- Edges are characters.  CH_DE_ is the delimiter prefix.  WHITE is for
  -- whitespace; GRAY is for other IFS chars; Black is for significant
  -- characters.
  char_kind = DE_White | DE_Gray | Black | Backslash

  builtin = 
    NONE | READ | ECHO | PRINTF | SHIFT
  | CD | PWD | PUSHD | POPD | DIRS
  | EXPORT | UNSET | SET | SHOPT
  | TRAP | UMASK
  | SOURCE | DOT | EVAL | EXEC | WAIT | JOBS
  | COMPLETE | COMPGEN | COMPOPT | COMPADJUST
  | TRUE | FALSE
  | COLON
  | TEST | BRACKET | GETOPTS
  | COMMAND | TYPE | HELP | HISTORY
  | DECLARE | TYPESET | ALIAS | UNALIAS
  | BIND
  | REPR
  | BUILTIN

  -- word_eval.py: SliceParts is for ${a-} and ${a+}, Error is for ${a?}, and
  -- SliceAndAssign is for ${a=}.
  effect = SpliceParts | Error | SpliceAndAssign | NoOp

  -- core/process.py
  process_state = Init | Done

  -- tools/osh2oil.py
  word_style = Expr | Unquoted | DQ | SQ
}
